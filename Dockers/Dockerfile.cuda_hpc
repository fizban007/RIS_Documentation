# Ubuntu 20.04 is required. 22.04 gives a shell error when doing ./configure, similar for newer versions of Rocky linux
FROM ubuntu:20.04

LABEL maintainer="Alex Chen <cyuran@wustl.edu>"

# These are packages required for infiniband driver
RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && \
    apt-get install -y \
    autoconf \
    automake \
    autotools-dev \
    bison \
    chrpath \
    debhelper \
    dpatch \
    ethtool \
    flex \
    gcc \
    git \
    g++ \
    libcap2 \
    libnl-3-200 \
    libnl-route-3-200 \
    libnuma1 \
    libnuma-dev \
    lsb-release \
    lsof \
    m4 \
    net-tools \
    pciutils \
    pkg-config \
    python \
    wget \
    vim && \
    apt-get clean all

# install a driver for the infiniband connection on RIS
ENV MOFED_VERSION 5.4-3.1.0.0
#ENV MOFED_VERSION 4.9-4.0.8.0
ENV OS_VERSION ubuntu20.04
ENV PLATFORM x86_64

RUN wget -q http://content.mellanox.com/ofed/MLNX_OFED-${MOFED_VERSION}/MLNX_OFED_LINUX-${MOFED_VERSION}-${OS_VERSION}-${PLATFORM}.tgz && \
    #tar -xvf MLNX_OFED_LINUX-${MOFED_VERSION}-${OS_VERSION}-${PLATFORM}.tgz
    tar -xvf MLNX_OFED_LINUX-${MOFED_VERSION}-${OS_VERSION}-${PLATFORM}.tgz && \
    MLNX_OFED_LINUX-${MOFED_VERSION}-${OS_VERSION}-${PLATFORM}/mlnxofedinstall --user-space-only --without-fw-update  --with-neohost-backend -q && \
    cd .. && \
    rm -rf ${MOFED_DIR} && \
    rm -rf *.tgz

# install a custom ucx version instead of the one coming with ubuntu 20.04
RUN apt-get remove -y ucx && \
    git clone https://github.com/openucx/ucx.git ucx && \
    cd ucx && \
    ./autogen.sh && \
    mkdir build && \
    cd build && \
    ../configure --prefix=/usr/ && \
    make && \
    make install

ENV OPENMPI_VERSION 4.0.1
ENV CUDA_VERSION 11.7.1
# ENV CUDA_DRIVER_VERSION 510.47.03

# RUN wget -q https://developer.download.nvidia.com/compute/cuda/${CUDA_VERSION}/local_installers/cuda_${CUDA_VERSION}_${CUDA_DRIVER_VERSION}_linux.run && \
#     sh cuda_${CUDA_VERSION}_${CUDA_DRIVER_VERSION}_linux.run --silent --driver --toolkit --toolkitpath=/usr/local/modules/cuda-${CUDA_VERSION} && \
#     rm cuda_${CUDA_VERSION}_${CUDA_DRIVER_VERSION}_linux.run
# RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin && \
#     mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
#     wget https://developer.download.nvidia.com/compute/cuda/${CUDA_VERSION}/local_installers/cuda-repo-ubuntu2006-11-6-local_${CUDA_VERSION}-${CUDA_DRIVER_VERSION}-1_amd64.deb && \
#     dpkg -i cuda-repo-ubuntu2004-11-6-local_11.6.1-510.47.03-1_amd64.deb && \
#     apt-key add /var/cuda-repo-ubuntu2004-11-6-local/7fa2af80.pub && \
#     apt-get update && \
#     apt-get -y install cuda

RUN export DEBIAN_FRONTEND=noninteractive && apt-get install -y \
    libboost-dev \
    cmake
    # nvidia-driver-510 && \

# Create environment exports and a custom mpirun wrapper
RUN echo "export MPI_HOME=/usr/local/modules/openmpi-${OPENMPI_VERSION}/" > /etc/bashrc && \
    echo "export HDF5_ROOT=/usr/local/modules/hdf5-1.12.2/" >> /etc/bashrc && \
    # echo "export PATH=/usr/local/modules/openmpi-${OPENMPI_VERSION}/bin:/usr/local/modules/cuda-${CUDA_VERSION}/bin:$PATH" >> /etc/bashrc && \
    echo "export PATH=/usr/local/modules/cuda-${CUDA_VERSION}/bin:\$PATH" >> /etc/bashrc && \
    echo "export LD_LIBRARY_PATH=/opt/ibm/lsfsuite/lsf/10.1/linux2.6-glibc2.3-x86_64/lib:/usr/local/modules/cuda-${CUDA_VERSION}/compat:$LD_LIBRARY_PATH" >> /etc/bashrc && \
    echo "#!/usr/bin/bash\n \
/usr/local/modules/openmpi-${OPENMPI_VERSION}/bin/mpirun --mca btl ^vader,tcp,openib,uct --mca pml ucx \
--mca opal_common_ucx_opal_mem_hooks 1 -x UCX_NET_DEVICES=mlx5_0:1 \$@" > /usr/bin/mpirun && \
    chmod a+x /usr/bin/mpirun
